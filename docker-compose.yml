
services:
  backend:
    build: 
      context: .
      dockerfile: dockerfile
    container_name: invguard_backend
    restart: unless-stopped
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_DEBUG=false
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_PATH=/app/data/inventory.db
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - PORT=${PORT:-5000}
    volumes:
      - db_data:/app/data
    networks:
      - invguard_network
    ports:
      - "${PORT:-5000}:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  cron:
    build: 
      context: ./cron
      dockerfile: Dockerfile
    container_name: invguard_cron
    restart: unless-stopped
    environment:
      - DATABASE_PATH=/app/data/inventory.db
      - BACKUP_PATH=/app/backups
      - GPG_PASSPHRASE=${GPG_PASSPHRASE}
      - API_URL=http://backend:5000/api
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-300}
    volumes:
      - db_data:/app/data:ro
      - backup_data:/app/backups
      - ./cron/logs:/app/logs
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - invguard_network
    healthcheck:
      test: ["CMD", "python", "-c", "import os; exit(0 if os.path.exists('/app/data/inventory.db') else 1)"]
      interval: 5m
      timeout: 30s
      retries: 3
      start_period: 30s

volumes:
  db_data:
    driver: local
  backup_data:
    driver: local

networks:
  invguard_network:
    driver: bridge